# -*- coding: utf-8 -*-
"""RBL_03_Project_Model Training_and_Evaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kLKH22RVfZDpyoqW43Id_tGHLLwIUUXP

## Part-02: Using CatBoost Model
"""

# Importing Libraries
import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

import catboost
# Print the CatBoost version
print("\n CatBoost version:", catboost.__version__)

from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler, LabelEncoder
from catboost import CatBoostClassifier

# new
# Definition of the predict_multiple function
def predict_multiple(model, data, top_n=3):
    # Make predictions
    preds_proba = model.predict_proba(data)

    # Get the top N predictions and their corresponding probabilities
    top_n_indices = np.argsort(-preds_proba, axis=1)[:, :top_n]
    top_n_probs = np.array([preds_proba[i, indices] for i, indices in enumerate(top_n_indices)])
    top_n_preds = model.classes_[top_n_indices]

    return top_n_preds, top_n_probs

# Importing the Dataset
student_data = pd.read_csv('../Data/student_data_with_placed_colleges.csv')

student_data

student_data['Branch'].unique()

student_data['College'].unique()

# Data Preparation

# Prepare features and target variables
X = student_data[['Age', 'Socioeconomic_Background', 'SSC_Marks_Percentage', 'HSC_Marks_Percentage', 'MHTCET_Scores_Percentile', 'JEE_Mains_Scores_Percentile']]
y_college = student_data['College']
y_branch = student_data['Branch']

# Encode categorical variables (Socioeconomic_Background)
le = LabelEncoder()
X['Socioeconomic_Background'] = le.fit_transform(X['Socioeconomic_Background'])

# Print the encoded values
print("Encoded values for Socioeconomic_Background:")
print(dict(zip(le.classes_, le.transform(le.classes_))))

# Train-Test Split and Scaling

# Split the data into training and testing sets
X_train, X_test, y_college_train, y_college_test, y_branch_train, y_branch_test = train_test_split(
    X, y_college, y_branch, test_size=0.2, random_state=42)

# Define categorical features for CatBoost
cat_features = ['Socioeconomic_Background']

college_model = CatBoostClassifier(iterations=1000, depth=6, learning_rate=0.1, loss_function='MultiClass', cat_features=cat_features, random_seed=42)
branch_model = CatBoostClassifier(iterations=1000, depth=6, learning_rate=0.1, loss_function='MultiClass', cat_features=cat_features, random_seed=42)

college_model.fit(X_train, y_college_train)
branch_model.fit(X_train, y_branch_train)

# new
# Predict multiple colleges and branches for the test data
y_college_pred_multi, y_college_probs = predict_multiple(college_model, X_test)
y_branch_pred_multi, y_branch_probs = predict_multiple(branch_model, X_test)

# Evaluate the models
college_accuracy_multi = accuracy_score(y_college_test, y_college_pred_multi[:, 0])  # Only consider the top prediction for accuracy
branch_accuracy_multi = accuracy_score(y_branch_test, y_branch_pred_multi[:, 0])  # Only consider the top prediction for accuracy

print("College Prediction Accuracy (Top 1):", college_accuracy_multi)
print("Branch Prediction Accuracy (Top 1):", branch_accuracy_multi)

# Print the top 3 predictions and their probabilities for the first test sample
print("Top 3 College Predictions and Probabilities for the first test sample:")
for i in range(len(y_college_pred_multi[0])):
    print("Prediction:", y_college_pred_multi[0][i], "| Probability:", y_college_probs[0][i])

print("Top 3 Branch Predictions and Probabilities for the first test sample:")
for i in range(len(y_branch_pred_multi[0])):
    print("Prediction:", y_branch_pred_multi[0][i], "| Probability:", y_branch_probs[0][i])

# # Inspect the values assigned during one-hot encoding for 'Socioeconomic_Background'
# print("Values assigned during one-hot encoding for Socioeconomic_Background:")
# print(le.classes_)

# # Evaluate CatBoost Models

# # Predict College and Branch for the test data
# y_college_pred = college_model.predict(X_test)
# y_branch_pred = branch_model.predict(X_test)

# # Evaluate the models
# college_accuracy = accuracy_score(y_college_test, y_college_pred)
# branch_accuracy = accuracy_score(y_branch_test, y_branch_pred)

# print("College Prediction Accuracy:", college_accuracy)
# print("Branch Prediction Accuracy:", branch_accuracy)

# Model Evaluation
# Add model evaluation using confusion matrices and classification reports
conf_matrix_college = confusion_matrix(y_college_test, y_college_pred_multi[:, 0])  # Only consider the top prediction for evaluation
conf_matrix_branch = confusion_matrix(y_branch_test, y_branch_pred_multi[:, 0])  # Only consider the top prediction for evaluation

# Plot confusion matrix for College
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_college, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix for College')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.show()

# Plot confusion matrix for Branch
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_branch, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix for Branch')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.show()

"""## Saving the model"""

# Save college_model
college_model.save_model("../Saved_Models/college_model.cbm")

# Save branch_model
branch_model.save_model("../Saved_Models/branch_model.cbm")